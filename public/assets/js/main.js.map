{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["\"use strict\";\n\n/*Elementos que me he traido del DOM: \n  - Botón \n  - Lista donde se pintan todos los shows\n  - Input que recoge el valor escrito por la usuaria \n  - Lista donde se pintan las películas favoritas\n\n*/\nconst button = document.querySelector(\".js-button\");\nconst showList = document.querySelector(\".js-list\");\nconst userValue = document.querySelector(\".js-input\");\nconst favList = document.querySelector(\".js-favlist\");\n//Arrays creados vacíos para ir rellenando con los shows\nlet shows = []; //array para resultados\nlet favShow = []; //array para los favoritos\n\n//Fetch. Aquí hago petición al servidor para que me dé todos los shows\nfunction queryResults() {\n  let userSearch = userValue.value;\n  fetch(`//api.tvmaze.com/search/shows?q=${userSearch}`) // petición a la api y en el q= pongo user search que es el value obtenido del input escrito por la usuaria\n    .then((response) => response.json())\n    .then((results) => {\n      shows = [];\n      for (let result of results) {\n        const show = result.show;\n        shows.push(show);\n      }\n      paintCards(shows, showList);\n    });\n}\n\n//Funciones\nfunction handleButton(ev) {\n  ev.preventDefault();\n  queryResults();\n}\n\n// para cargar los favoritos que estan en el localStorage\nfunction loadFavoriteShows() {\n  const savedFavShow = localStorage.getItem(\"favShow\");\n  if (savedFavShow) {\n    favShow = JSON.parse(savedFavShow);\n    paintCards(favShow, favList);\n  }\n}\n\n//Función para pintar cada result obtenido y para pintar los favoritos pasandolos como parámetros.\nfunction paintCards(showArray, showListHtml) {\n  let html = \"\";\n  for (let show of showArray) {\n    html += getShowHtml(show);\n  }\n  showListHtml.innerHTML = html;\n  addHandlerForCardsInList(showArray, showListHtml); //añade clickhandler\n}\n// Devuelve un html que me permite dibujar show el un <li>\nfunction getShowHtml(show) {\n  const name = show.name;\n  const image = show.image;\n  const id = show.id;\n\n  let imageUrl = \"\";\n  if (image) {\n    imageUrl = image.medium;\n  } else {\n    imageUrl = \"https://via.placeholder.com/210x295/ffffff/666666/?text=TV\";\n  }\n\n  let liClass = \"card list__item\";\n  const favoriteShowFound = favShow.findIndex((favorite) => {\n    return favorite.id === id;\n  }); //El  show que estamos dibujando es favorito?\n\n  if (favoriteShowFound !== -1) {\n    liClass += \" selectedCard\";\n  }\n  return `<li class=\"${liClass}\" id=\"${id}\">\n    <h4 class=\"list__title\">${name}</h4>\n     <img  src=\"${imageUrl}\">\n     </li>`;\n}\n// Añade un evento para escuchar cada carta dibujada en la pantalla\n\nfunction addHandlerForCardsInList(showArray, showListHtml) {\n  const allShowsHtml = showListHtml.querySelectorAll(\".card\");\n  for (let card of allShowsHtml) {\n    card.addEventListener(\"click\", (ev) => {\n      handleClickedShow(ev, showArray);\n    });\n  }\n}\n//ev: porque necesito llegar al currentTarget para saber cual es el li clickcado.\n// ShowArray: Por qué he pasado este argumento? Porque cuando quería quitar de favoritos no estaba en el shows y tenía que mirar en favshow.\n//Función del evento click para cada uno de los shows clickados.\nfunction handleClickedShow(ev, showArray) {\n  const clickedShowLi = ev.currentTarget;\n  const clickedShowId = parseInt(clickedShowLi.id);\n  // Antes: const clickedShowObject = shows.find((show) => {\n  const clickedShowObject = showArray.find((show) => {\n    return show.id === clickedShowId; //true or false\n  });\n  //Para meter en el array el show clickado\n  updateFavoriteList(clickedShowObject);\n\n  //console.log(favShow);\n  paintCards(favShow, favList);\n  paintCards(shows, showList);\n\n  localStorage.setItem(\"favShow\", JSON.stringify(favShow));\n}\n//Función que añade o quita el favorito comprobando antes si esta\nfunction updateFavoriteList(clickedShowObject) {\n  const favoriteShowFound = favShow.findIndex((favorite) => {\n    return favorite.id === clickedShowObject.id;\n  });\n\n  if (favoriteShowFound === -1) {\n    favShow.push(clickedShowObject);\n  } else {\n    favShow.splice(favoriteShowFound, 1);\n  }\n}\n\n//Eventos\nloadFavoriteShows();\nbutton.addEventListener(\"click\", handleButton);\n"]}